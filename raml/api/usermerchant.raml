#%RAML 0.8
title: ePaisa
version: 2.0
baseUri: http://nine.epaisa.com
securitySchemes:
  - customSecurityScheme:
      type:
        x-custome
      description: This <i>Token</i> is generated by login call and is working for one houre.
/user/login:
  description: logging in user
  post:
    description: logging in user
    queryParameters:
       param1:
        type: string
        required: true
        description: generated imei for the user.
        displayName: IMEI
       param2:
        type: string
        required: true
        description: username should be a valid email address
        displayName: Username (e-mail)
       param3:
        type: string
        required: true
        description: password given while registeration
        displayName: Password
       param4:
        type: string
        required: true
        description: GCMId for sending notifications.
        displayName: GcmId
       param5:
        type: string
        required: true
        description: Version of the client app
        displayName: Version
       param6:
        type: integer
        required: false
        description: SourceId of the app. This can be obtained from masterdata sources call
        displayName: sourceId
       param7:
        type: string
        required: false
        description: location of the user. Default is 0,0
        displayName: location        
    responses:
      200:
        body:
          application/json:
            example: |
              {"success":1,
              "response":{"id":16,"userRoleId":0,"username":"ty@ty.com","merchantId":14,"auth_key":"jB2VMdsfsdfslWOA1GBelLDFsxi4jfmPHGxyrb","auth_key_creationtime":1455890591,"password_hash":"$2y$13$JxMasFFwcN0WLz12VO./SeFADvasXxxVIEQuocWlM7BzX3QvQabuW","userMobileNumber":"1234567890","userFirstName":"ttt","userMiddleName":"hhh","userLastName":"high","userLogo":"","CityId":0,"StateId":0,"PINCode":"23652","CountryCode":"IN","userAddress1":"thhh","userAddress2":"yyklk##","userIMEI":"DpndIb","userPANNumber":"566416666","userAppVersion":"0.00","dateOfBirth":"17.03.2016","created_at":1455712023,"updated_at":1455890591}}
/user/coldlogin:
  description: for generating new token
  post:
    description: for generating new token
    queryParameters:
       param1:
        type: string
        required: true
        description: generated imei for the user.
        displayName: IMEI
       param2:
        type: string
        required: true
        description: this json object should include username, password, merchantId, sourceId and userId keys. Optional keys are location
        displayName: json object
/user/register:
  description: Api call for registering a new user
  post:
    description: Api call for registering a new user
    queryParameters:
      param1:
        required: true
        displayName: Json string
        description: Below keys are accepted 
          <p><b>IMEI</b> - mobile imei</p>
          <p><b>Username (mandatory)</b> - email of the user</p>
          <p><b>Password (mandatory)</b> - Password of the user</p>
          <p><b>UserFirstName (mandatory)</b> - First name of the user</p>
          <p><b>UserMiddleName</b> - Middle name of the user</p>
          <p><b>UserLastName (mandatory)</b> - Last name of the user</p>
          <p><b>UserMobileNumber (mandatory)</b> - Mobile number of the user</p>
          <p><b>UserPANNumber</b> - User's Pan number</p>
          <p><b>BusinessName (mandatory)</b> - Company name (mandatory)</p>
          <p><b>CompanyPANCode</b> - Company PAN Code</p>
          <p><b>YearlyRevenue</b> - Company Yearly Revenue</p>
          <p><b>BusinessTypeId</b> - Business Type id obtained from business types call</p>
          <p><b>Industry (mandatory)</b> - Selected Industry obtained from industry call. If "other" industry is selected, send other industry name instead of id</p>
          <p><b>Category (mandatory)</b> - Selected Category obtained from industry call. If "other" category is selected, send other category name instead of id.</p>
          <p><b>Subcategory</b> - Selected subcategory id. This field doesnt support other.</p>
          <p><b>CityId (mandatory)</b> - Selected city id</p>
          <p><b>StateId (mandatory)</b> - Selected state id</p>
          <p><b>DateOfBirth</b> - User's birthday in dd.mm.YYYY format</p>
          <p><b>PINCode</b> - Pincode for user's location</p>
          <p><b>CountryCode (mandatory)</b> - 2-digit code of the selected country. You can also send the country id if obtained from country call</p>
          <p><b>Address1</b> - Address line 1</p>
          <p><b>Address2</b> - Address line 2</p> 
          <p><b>sourceId</b> - SourceId for generating the token</p> 
          <p><b>registeredReferralCode</b> - referralCode of the referred merchant</p>  
/user/check:
  description: Api call for checking if user exists with given details
  post:
    description: Api call for checking if user exists with given details
    queryParameters:
      param1:
        required: true
        displayName: Json string
        description: Below keys are accepted 
          <p><b>username</b> - username (email) of the user to check</p>
          <p><b>mobile</b> - mobile number of the user to check</p> 
    responses:
      200:
        body:
          application/json:
            example: | 
              {"success":1,"response":{"username":{"exists":true,"message":"There is already a user with given details."},"mobile":{"exists":false,"message":"There is no user found with given details."}}}
/user/profile:    
  description: To update user and merchant data
  put:
    description: To update user and merchant data
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token generated from login call on /user/login 
      param2:
        required: true
        type: string
        displayName: json string
        description: key value pair in json string. Available params are
      body:
      application/json:
        example: |
                EX1
                 {
                  "userId":455,
                  "roleId":1,
                  "username":"m@m.com",
                  "merchantId":466,
                  "storeLocationId":0,
                  "userMobileNumber":"+919960947632",
                  "userFirstName":"Satish",
                  "userMiddleName":"Uttamrao",
                  "userLastName":"Charmal",
                  "userImage":"v2/productimages/455__20160802065859.jpeg",
                  "userCityId":3159,
                  "cityName":"Kopergaon",
                  "userStateId":13,
                  "stateName":"Maharashtra",
                  "pincode":"423601",
                  "userAddress1":"2342",
                  "userAddress2":"Mahape",
                  "userPanNumber":"",
                  "dateOfBirth":"",
                  "Industry":"other",
                  "Category":"other",
                  }
                  EX2
                    {
                    
                    "merchantId":466,
                    "planId":1,
                    "businessTypeId":1,
                    "planExpiryDate":"0000-00-00 00:00:00",
                    "industryId":5,
                    "countryCode":"IN",
                    "stateId":13,
                    "cityId":2949,
                    "areaId":0,
                    "merchantCompanyName":"clover infotech",
                    "merchantPANCode":"ADERP1242K",
                    "merchantYearlyRevenue":6,
                    "merchantAllowedUser":1,
                    "merchantTransactionStatus":"ACTIVE",
                    "Industry":"other",
                    "Category":"other"
                    "Subcategory":[
                    43,
                    44,
                    47
                    ]
                    }
/user/changepassword:
  description: To change user's password
  put:
    description: To change user's password
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token generated from login call on /user/login 
      param2:
        required: true
        type: string
        displayName: json string
        description: key value pair in json string. Available params are
            <br>currentPassword
            <br>newPassword
/user/invite:
  description: To invite other users to join to a merchant.
  post:
    description: To invite other users to join to a merchant.
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token generated from login call on /user/login
      param2:
        required: true
        displayName: Json String
        description: Json array of users to invite. Keys are below.
                    email - email of user. This is required.
                    userFirstname - firstname of user. This is optional.
                    userLastname - Lastname of the invited user. Its optional.
                    Currently, users are invited with Merchant user role and it's not allowed to send roleId on invitation.
      body:
      application/json:
        example: |
          [
            {
            "userFirstName":"vinit.choudhari@epaisa.com",
            "userLastName":"vinit",
            "email":"choudhari",
            "roleId":{
            "roleId":1,
            "merchantId":"0",
            "roleName":"Super Admin"
            }
            },
            {
            "userFirstName":"sagar",
            "userLastName":"choudhari",
            "email":"vinit.epaisa@gmail.com",
            "roleId":{
            "roleId":4,
            "merchantId":"0",
            "roleName":"Merchant User"
            }
            }
            ],
    responses:
      200:
        body:
          application/json:
            example: |
                 [{"success":1,"response":{"username":"vinit.choudhari@epaisa.com","userFirstName":"vinit","userLastName":"choudhari","roleId":4,"storeLocationId":0,"merchantId":466,"status":0,"password_hash":"$2y$13$hFseT8nuJEHiBiZHgWATt.cLtoEJzmv/dTk08pJ7Q4UbWmbbOe1eK","created_at":1470318976,"updated_at":1470318976,"id":547,"auth_key":"BAB5mi-fklFM7D05VK7Ja6NslPHGqn9-kq6N0yZ1hWXY_HEuf40ZCqD5vOUjf9su","auth_key_creationtime":1470318976}},{"success":1,"response":{"username":"vinit.epaisa@gmail.com","userFirstName":"sagar","userLastName":"choudhari","roleId":4,"storeLocationId":0,"merchantId":466,"status":0,"password_hash":"$2y$13$0PbfkYuUpOdtQWCOORkvZedBxyzB2X7RSN8iXMUPzx4AX33DVXhAy","created_at":1470318978,"updated_at":1470318978,"id":548,"auth_key":"tQV36sdcArps701IYc5ehMg89t5cXoMQ4L-U9xRo3CIQr4XqpOh-tOmTh1Y3Pr7W","auth_key_creationtime":1470318978}}]
/user/acceptinvitation:
  description: endpoint to call when user accepts an invitation. This endpoint can be called with get parameters from a link.
  get:
    description: endpoint to call when user accepts an invitation. This endpoint can be called with get parameters from a link.
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user.  
  post:
    description: endpoint to call when user accepts an invitation. Post version can be called by a client app.
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user.
/user/forgotpassword:
  description: To generate and send a new password to the user.
  post:
    description: To generate and send a new password to the user.
    queryParameters:
      param1:
        required: true
        displayName: json string of parameters
        description: based on the flow, we need different parameters encoded in json string <p><b>Step 1</B></p> on this step we can either send "email" parameter and start email based password reset flow or "mobile" parameter and start otp based password reset flow. <p><b>Step 2</b></p> If we have started the email flow, merchant ui will make the calls accordingly with the token and new password. If otp based flow is started, this endpoint needs to be called again with "mobile", "otp" and "newpassword" fields to validate the otp and reset the password.
/user/role:
  description: to list custom roles created by the merchant
  get:
    description: to list custom roles created by the merchant
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user.  
  post:
    description: to create a new custom role to be used by the merchant. This custom role will only be visible to merchant will not be public.
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: RoleName
        description: Name for the custom role
  put:
    description: to update a custom role
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: RoleId
        description: Id of the custom role
      param3:
        required: true
        displayName: RoleName
        description: New Name for the custom role
  delete:
    description: to soft delete a given custom role
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: RoleId
        description: Id of the custom role
/credits:
  description: to list all credited amount to merchant.
  get:
    description: to list all credited amount to merchant.
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description: "merchantId IS required" 
  post:
    description: to add amount to merchant account
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description: Json string with follwing keys are required
                    merchantId - merchantId 
                    amount - amoun to add in merchant account
/user/doc:
  description: to list all documents of merchant.
  get:
    description: to list all documents of merchant.
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description: "merchantId IS required" 
  post:
    description: to upload kyc documents
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description: Json string with follwing keys are required
                    merchantId - merchantId 
                    files - array of base 64 encoded data
                    documentMainType - 'IDPROOF','BANKPROOF','COMPANYPROOF','ADDRESSPROOF','OTHER'
                    documentSubType - sub type will depen on documentMainType 
                    IDPROOF => 
                    'Driver's Licence',
                    'Pan Card', 
                    'Aadhar Card', 
                    'Ration Card',
                    'Voter Id Card'
                    
                    BANKPROOF => 
                    '6 Month bank statement', 
                    'Cancelled Cheque',
  
                    COMPANYPROOF => 
                    'VAT',
                    'TIN', 
                    'Income Tax Return', 
                      
                    ADDRESSPROOF => 
                     'Aadhar Card',
                    '6 Month bank statement', 
                    'Telephone Bill', 
                    'Driver\'s Licence',
                    'Voter Id Card',
                    'Latest Electricity Bill'  
/user/docread:    
  description: to read actual document data in base64 format
  get:
    description: to read actual document data in base64 format
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description: "documentId IS required. To fetch other merchants' documents please send merchantId key. But on this case, it will check for list_documents permission." 	             
/user/devices:
  get:
    description: to list all devices of merchant.
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description: merchantId IS required in json string
                     optional parameters as follows
                     merchantDeviceId
                     userId
                     deviceId
                     deviceSerialNumber
/user/passwordupdate:
  post:
    description: Update password when its expire
    queryParameters:
      param1:
        required: true
        displayName: JSON STRING
        description: json string.
                    {"userName":"xyz@pqr.com","currentPassword":"abcdef@567","newPassword":"25asdfgT@1988"}
/user/permission:
  get:
    description: to list all permissions available to merchant.
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user.
      param2:
        required: true
        type: string
        displayName: json string
        description: key value pair in json string.
                    {"roleId":1,"merchantId":466,"sourceId":1}
                     sourceId optional 
  post:
    description: to assign a permission to given custom role
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: RoleId
        description: Id of the custom role
      param3:
        required: true
        displayName: RoleDetailId
        description: Id of the permission (roleDetail) to assign to the role
      param4:
        required: true
        displayName: value
        description: 1 read, 2 write, 3 readwrite
  put:
    description: to update permission value of a custom role
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: RoleId
        description: Id of the custom role
      param3:
        required: true
        displayName: RoleDetailId
        description: Id of the permission (roleDetail) to assign to the role
      param4:
        required: true
        displayName: value
        description: 1 read, 2 write, 3 readwrite
  delete:
    description: to soft delete a permission of custom role
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: RoleId
        description: Id of the custom role
      param3:
        required: true
        displayName: RoleDetailId
        description: Id of the permission (roleDetail) to assign to the role
/setting:
  get:
    description: for getting merchant & user settings data
    queryParameters:
       param1:
        required: true
        displayName: Token
        description: Token generated by login call
  put:
    description: for updating merchant & user settings
    queryParameters:
       param1:
        required: true
        displayName: Token
        description: Token generated by login call
       param2:
        required: true
        displayName: json string. Main key is "settingoptionsparams"
        description: json array of criterias. Possible keys are below
                      <h3>General</h3>
                      <p><b>Language</b> App language 2-digit  key</p>
                      <p><b>CurrencyId</b> id of the selected currency</p>
                      <p><b>CurrencyId</b> id of the selected currency</p>
                      <h3>Device</h3>
                      <p><b>EnableSound</b> Enable/Disable sound on the app</p>
                      <p><b>EnableCamera</b> Enable/Disable camera on the app</p>
                      <h3>Transaction</h3>
                      <p><b>OfflineTransactions</b> Enable/Disable offline transactions on the app</p>
                      <p><b>RoundOff</b> Enable/Disable roundoff on the app</p>
                      <p><b>TaxSelection</b> Tax selection (Manual, Auto, Disabled)</p>
                      <p><b>TaxType</b> Tax type (Inclusive,)</p>
                      <p><b>Vat</b> Vat in percentage</p>
                      <p><b>ServiceTax</b> Service Tax in percentage</p>
                      <p><b>SwachhBharatCess</b> Swachh Bharat Cess in percentage</p>
                      <p><b>VatFbm</b> Vat (Fbm) in percentage</p>           <p><b>SalesTax</b> Sales Tax in percentage</p>
                      <h3>Notification</h3>
                      <p><b>TransactionNotification</b> receive notifications about transactions. Values are combined boolean based on order. ie 111 means push, email, sms is open. 011 means push is closed, sms and email is open. 000 means all are closed.</p>
                      <p><b>SummaryNotification</b> receive summary notifications. Values are combined boolean based on order. ie 111 means push, email, sms is open. 011 means push is closed, sms and email is open. 000 means all are closed.</p>
                      <p><b>HeldTransactionsDailySummary</b> receive notifications about daily transactions. Values are combined boolean based on order. ie 111 means push, email, sms is open. 011 means push is closed, sms and email is open. 000 means all are closed.</p>
                      <p><b>EpaisaOffersNotification</b> Receive notifications about ePaisa offerings. Values are combined boolean based on order. ie 111 means push, email, sms is open. 011 means push is closed, sms and email is open. 000 means all are closed.</p>
/tax:
  get:
    description: to list of taxes created by the merchant
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token 
      body:
      application/json:
        example: |
             {"merchantId":679,"userId":662}
    responses:
      200:
        body:
          application/json:
            example: |
                 {
                   "success":1,
                   "response": 
                   {
                     "Tax":[
                       {
                         "taxId":15,
                         "merchantId":679,
                         "taxName":"VAT",
                         "taxRuleApplyFor":null,
                         "taxValue":"12.00",
                         "taxMode":"%",
                         "taxType":"Inclusive",
                         "taxScope":"Global",
                         "taxServiceIncluded": 1
                         }
                      ]
                    }
                  }        
  post:
    description: to create a new taxes
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description:  merchantId ,userId ,taxMode (mode of tax i.e percentage or amount) ,taxName (tax name), taxRuleApplyFor ('Delivery','For Here','Pickup','To Go'),taxType (Inclusive oe Exclusive ),taxValue (value of tax to applied) ,taxScope ('Global' or 'Custom' global taxes can apply to all products but custom taxes are applied to a specific product), taxServiceIncluded (0 or 1)
        
      body:
      application/json:
        example: |
              {
                "taxId":"",
                "merchantId":466,
                "userId":455,
                "taxName":"GST",
                "taxValue":"12",
                "taxMode":"%",
                "taxType":"Inclusive",
                "taxScope":"Custom",
                "taxServiceIncluded": 1
              }
    responses:
      200:
        body:
          application/json:
            example: |
                 {
                   "success":1,
                   "response":  {
                     "merchantId":466,
                     "taxName":"GST",
                     "taxRuleApplyFor":null,
                     "taxMode":"%",
                     "taxType":"Inclusive",
                     "taxValue":"12",
                     "created_at":1470378923,
                     "updated_at":1470378923,
                     "createdUserId":455,
                     "taxId":2,
                     "taxScope":"Custom",
                     "taxServiceIncluded": 1
                   }
                 }
  put:
    description: to update a new taxes
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description:  merchantId ,taxId ,taxMode ,taxName, taxRuleApplyFor,taxType ,taxValue , taxScope , userId, taxServiceIncluded
  delete:
    description: to delete tax
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: taxId
        description: Id of the tax
/deposithistory:
  get:
    description: to fetch merchant's deposit history.
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token
      param2:
        required: true
        displayName: criterias
        description: Criterias to fetch the deposit history data  
                     <p><B>merchantId</b> merchantId for the deposit history</p>
                     <p><B>depositedRefNumber</b> unique number generated on settlement to find history belong to certain settlement.</p>
                     <p><B>depositedTID</b> unique TID number of the merchant.</p>
                     <p><B>depositedMID</b> unique MID number of the merchant.</p>
      body:
      application/json:
        example: |
             {"merchantId":679,"depositedRefNumber":"100000","depositedTID":"tid","depositedMID":"mid"}
    responses:
      200:
        body:
          application/json:
            example: |
                 {"success":1,"response":{"merchantDeposits":[{"depositedHistoryId":1,"merchantId":480,"depositedRefNumber":"100000","depositedCharge":"14.00","depositedTID":"tid","depositedMID":"mid","created_at":1471950774,"updated_at":1471951143}]}}       
  post:
    description: to create a new merchant deposit history record
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token
      param2:
        required: true
        displayName: JSON STRING
        description:  <p><B>merchantId</b> merchantId for the deposit history</p>
                     <p><B>depositedRefNumber</b> unique number generated on settlement to find history belong to certain settlement.</p>
                     <p><B>depositedCharge</b> Amount that had deposited.</p>
                     <p><B>depositedTID</b> unique TID number of the merchant.</p>
                     <p><B>depositedMID</b> unique MID number of the merchant.</p>
        
      body:
      application/json:
        example: |
              {
                "depositedRefNumber":"1000000",
                "merchantId":466,
                "depositedCharge":"12.00",
                "depositedTID":"tid",
                "depositedMID":"mid"
                }
    responses:
      200:
        body:
          application/json:
            example: |
                 {"success":1,"response":{"depositedHistoryId":1,"merchantId":480,"depositedRefNumber":"100000","depositedCharge":"14.00","depositedTID":"tid","depositedMID":"mid","created_at":1471950774,"updated_at":1471951143}}} 

        
  put:
    description: to update a merchant deposit history record
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token 
      param2:
        required: true
        displayName: JSON STRING
        description:  
                     <p><B>depositedHistoryId</b> unique id of the deposit history record</p>
                     <p><B>merchantId</b> merchantId for the deposit history</p>
                     <p><B>depositedRefNumber</b> unique number generated on settlement to find history belong to certain settlement.</p>
                     <p><B>depositedCharge</b> Amount that had deposited.</p>
                     <p><B>depositedTID</b> unique TID number of the merchant.</p>
                     <p><B>depositedMID</b> unique MID number of the merchant.</p>
        
      body:
      application/json:
        example: |
              {
                "depositedHistoryId":"1",
                "depositedRefNumber":"1000000",
                "merchantId":466,
                "depositedCharge":"12.00",
                "depositedTID":"tid",
                "depositedMID":"mid"
                }
    responses:
      200:
        body:
          application/json:
            example: |
                 {"success":1,"response":{"depositedHistoryId":1,"merchantId":480,"depositedRefNumber":"100000","depositedCharge":"14.00","depositedTID":"tid","depositedMID":"mid","created_at":1471950774,"updated_at":1471951143}}} 
  delete:
    description: to delete a merchant deposit history record
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description:  
                     <p><B>merchantId</b> merchantId for the deposit history record</p>
      body:
      application/json:
        example: |
              {
                "depositedHistoryId":"1",
                "merchantId":466,
                }
    responses:
      200:
        body:
          application/json:
            example: |
                 {"success":1,"response":"Merchant deposit history record deleted successfully."}   
/user/regeneratetoken:
  get:
    description: Api call for generating a new token
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token       
      param2:
        required: true
        displayName: Json string
        description: Below keys are accepted 
          <p><b>merchantId</b> - merchantId to validate</p>
          <p><b>sourceId</b> - sourceId to generate the token into</p> 
    responses:
      200:
        body:
          application/json:
            example: | 
              {"success":1,"response":{"id":463,"roleId":3,"userRole":"Merchant Admin (Approved)","username":"hk@eigital.com","merchantId":480,"storeLocationId":0,"auth_key":"Hbvh59Dco6C3VF_mxzHhdq7doEiDD5lV9tIbTsVSXJFehy6GEWjgcE6vLW2toojj","auth_key_creationtime":1471959822,"userMobileNumber":"+485104397460","userFirstName":"Galileo","userMiddleName":"","userLastName":"Kabaca ","userImage":"","cityId":0,"stateId":0,"pincode":"122333333333","countryCode":"IN","userAddress1":"Test","userAddress2":"Test2","userIMEI":"le8fKp","userPanNumber":"","userAppVersion":"0.00","dateOfBirth":"26.04.1984","status":1,"created_at":1467616820,"updated_at":1471602941}}                          
/ticket:      
  post:
    description: to create a new ticket
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description:  merchantId, userId, username, email, company, message, cellphone
      body:
      application/json:
        example: |
          {
            "username":"somename",
            "merchantId":466,
            "userId":455,
            "email":"someemail@someaddress.com",
            "company":"some company",
            "message":"I have some problem in adding new product.",
            "cellphone":"91932487349"
          }
    responses:
      200:
        body:
          application/json:
            example: |
             {
               "success":1,
               "message":"Ticket added successfully"
             }
/store:
  description: <b>/store</b> to list all credited amount to merchant.
  get:
    description: to list all credited amount to merchant.
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token sent to invited user. 
      param2:
        required: true
        displayName: JSON STRING
        description: "merchantId IS required" 
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "success": 1,
                "response": {
                  "StoreLocations": [
                    {
                      "workingHours": [],
                      "details": [
                        {
                          "storeLocationDetailId": 1,
                          "storeLocationId": 424,
                          "paramName": "test",
                          "paramValue": "rest",
                          "sourceId": 0,
                          "status": 1,
                          "created_at": 0,
                          "updated_at": 0,
                          "createdUserId": 0,
                          "updatedUserId": 0
                        },
                        {
                          "storeLocationDetailId": 2,
                          "storeLocationId": 424,
                          "paramName": "Foo",
                          "paramValue": "Bar",
                          "sourceId": 0,
                          "status": 1,
                          "created_at": 0,
                          "updated_at": 0,
                          "createdUserId": 0,
                          "updatedUserId": 0
                        }
                      ],
                      "storeLocationId": 424,
                      "merchantId": 472,
                      "type": "store",
                      "caption": "Headquarters",
                      "phoneNumber":"",
                      "pincode":"",
                      "address1":"",
                      "address2":"",
                      "cityId":"",
                      "stateId":"",
                      "countryCode":""
                    },
                    {
                      "workingHours": [],
                      "details": [],
                      "storeLocationId": 1426,
                      "merchantId": 472,
                      "type": "store",
                      "caption": "NEW STORE",
                      "phoneNumber":"",
                      "pincode":"",
                      "address1":"",
                      "address2":"",
                      "cityId":"",
                      "stateId":"",
                      "countryCode":""
                    },
                    {
                      "workingHours": [],
                      "details": [],
                      "storeLocationId": 1428,
                      "merchantId": 472,
                      "type": "store",
                      "caption": "BANDRA",
                      "phoneNumber":"",
                      "pincode":"",
                      "address1":"",
                      "address2":"",
                      "cityId":"",
                      "stateId":"",
                      "countryCode":""
                    }
                  ]
                }
              }
  post:
    description: This api will add new store
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token generated from login call on /user/login
      param2:
        required: true
        displayName: data (json)
        description: 
            <p><b><i>IMEI</i></b> - generated imei value of the client. <u>Optional</u></p>
            <p><b><i>storeLocationId</i></b>
            <p><b><i>type</i></b>
            <p><b><i>caption</i></b>
            <p><b><i>address1</i></b>
            <p><b><i>address2</i></b>
            <p><b><i>cityId</i></b>
            <p><b><i>stateId</i></b>
            <p><b><i>countryCode</i></b>
            <p><b><i>pincode</i></b>
            <p><b><i>phoneNumber</i></b>
            <p><b><i>merchantId</i></b>
            <p><b><i>workingHours</i></b> - an array of (to update an old row) storeLocationWorkingHourId is necessary, day, start and end 
            <p><b><i>params</i></b> - an array of (to update an old row) storeLocationDetailId is necessary, paramName and paramValue
    body:
      application/json:
        example: |
         {
            "merchantId": 123,
            "type": "store",
            "caption": "Big Store",
            "phoneNumber": "",
            "pincode": "",
            "address1": "",
            "address2": "",
            "cityId": "",
            "stateId": "",
            "countryCode": "",
            "workingHours": [
              {
                "day": "Monday",
                "start": "9:00",
                "end": "12:00"
              },
              {
                "day": "Monday",
                "start": "14:00",
                "end": "18:00"
              },
              {
                "day": "Tuesday",
                "start": "9:00",
                "end": "12:00"
              },
              {
                "day": "Friday",
                "start": "9:00",
                "end": "12:00"
              }
            ],
            "params": [
              {
                "paramName": "Foo",
                "paramValue": "Bar"
              },
              {
                "paramName": "Foo",
                "paramValue": "Bar"
              },
              {
                "paramName": "Foo",
                "paramValue": "Bar"
              },
              {
                "paramName": "Foo",
                "paramValue": "Bar"
              }
            ]
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                success: 1,
                message: "Store details added successfully."
                }
              }
  put:
    description: This api will edit a store
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token generated from login call on /user/login
      param3:
          required: false
          type: string
          displayName: requestParams
          description: Below keys are accepted [Json String]
            <p><b><i>IMEI</i></b> - generated imei value of the client. <u>Optional</u></p>
            <p><b><i>storeLocationId</i></b>
            <p><b><i>type</i></b>
            <p><b><i>caption</i></b>
            <p><b><i>address1</i></b>
            <p><b><i>address2</i></b>
            <p><b><i>cityId</i></b>
            <p><b><i>stateId</i></b>
            <p><b><i>countryCode</i></b>
            <p><b><i>pincode</i></b>
            <p><b><i>phoneNumber</i></b>
            <p><b><i>merchantId</i></b>
            <p><b><i>workingHours</i></b> - an array of (to update an old row) storeLocationWorkingHourId is necessary, day, start and end 
            <p><b><i>params</i></b> - an array of (to update an old row) storeLocationDetailId is necessary, paramName and paramValue
    body:
      application/json:
        example: |
         {
            "storeLocationId": 123,
            "type": "store",
            "caption": "Not so big",
            "address": "another address",
            "merchantId": 54,
            "workingHours": [
              {
                "storeLocationWorkingHourId": 4,
                "day": "Monday",
                "start": "9:00",
                "end": "12:00"
              },
              {
                "storeLocationWorkingHourId": 5,
                "day": "Monday",
                "start": "14:00",
                "end": "18:00"
              },
              {
                "day": "Tuesday",
                "start": "9:00",
                "end": "12:00"
              },
              {
                "day": "Friday",
                "start": "9:00",
                "end": "12:00"
              }
            ],
            "params": [
              {"storeLocationDetailId": 54, "paramName":"Foo","paramValue":"Bar"},
              {"storeLocationDetailId": 59, "paramName":"Foo","paramValue":"Bar"},
              {"paramName":"Foo","paramValue":"Bar"},
              {"paramName":"Foo","paramValue":"Bar"}
            ]
         }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                success: 1,
                message: "Store details updated successfully",
                messageDetails: []
              }
  delete:
    description: This api will delete a customer details in customerDetail table
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token generated from login call on /user/login
      param2:
        required: true
        displayName: data (json)
        description: json array example phoneNumber , firstName & lastName required Key
    body:
      application/json:
        example: |
          {
            "storeLocationId": 123,
            "merchantId": 54
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                success: 1,
                response: []
              }
/store/working-hours:
  description: Store Working Hour endpoit provide you whole the functionality you need.
  post:
    description: To create and edit a store working hour row.
    securedBy: [customSecurityScheme]
    queryParameters:
      param1:
          required: true
          type: string
          displayName: Token
          description: This <i>Token</i> is generated by login call and is working for one houre.
      param2:
          required: true
          type: string
          displayName: clientId
          description: This <i>ID</i> is generated for each client.
      param3:
          required: true
          type: string
          displayName: requestParams
          description: Below keys are accepted [Json String]
            <p><b><i>IMEI</i></b> - generated imei value of the client. <u>Optional</u></p>
            <p><b><i>storeLocationId</i></b> - unique identifier for the store.</p>
            <p><b><i>workingHours</i></b> - array of "day", "start" and "end" to create plus "storeLocationWorkingHourId" for edit only.</p>
    body:
      application/json:
        example: |
          {
            "storeLocationId": 424,
            "workingHours": [
              {
                "day": "Monday",
                "start": "9:00",
                "end": "12:00"
              },
              {
                "day": "Monday",
                "start": "14:00",
                "end": "18:00"
              },
              {
                "day": "Tuesday",
                "start": "9:00",
                "end": "12:00"
              },
              {
                "day": "Friday",
                "start": "9:00",
                "end": "12:00"
              },
              {
                "storeLocationWorkingHourId": 4,
                "day": "Friday",
                "start": "9:00",
                "end": "12:00"
              }
            ]
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "success": 1,
                "message": "parameters are store successfully.",
                "messageDetails": []
              }
  delete:
    description: To delete a store working hour.
    securedBy: [customSecurityScheme]
    queryParameters:
      param1:
          required: true
          type: string
          displayName: Token
          description: This <i>Token</i> is generated by login call and is working for one houre.
      param2:
          required: true
          type: string
          displayName: clientId
          description: This <i>ID</i> is generated for each client.
      param3:
          required: true
          type: string
          displayName: requestParams
          description: Below keys are accepted [Json String]
            <p><b><i>IMEI</i></b> - generated imei value of the client. <u>Optional</u></p>
            <p><b><i>storeLocationWorkingHourId</i></b> - unique identifier for the store location working hour.</p>
    body:
      application/json:
        example: |
          {
            "storeLocationWorkingHourId": 3
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "success": 1,
                "response": []
              }
/store/details:
   post:
    description: This api will add new store details
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token generated from login call on /user/login
      param2:
        required: true
        displayName: data (json)
        description: json array example phoneNumber , firstName & lastName required Key
        type:
        example: | 
         {
            "storeLocationId": 123,
            "params": [
              {"paramName":"Foo","paramValue":"Bar"},
              {"paramName":"Foo","paramValue":"Bar"},
              {"paramName":"Foo","paramValue":"Bar"},
              {"paramName":"Foo","paramValue":"Bar"}
            ]
         }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                success: 1,
                message: "parameters are store successfully."
                }
              }
   put:
    description: This api will edit a store details
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token generated from login call on /user/login
      param2:
        required: true
        displayName: data (json)
        description: json array example phoneNumber , firstName & lastName required Key
        type:
        example:  | 
         {
            "storeLocationId": 123,
            "storeLocationDetailId": 54
         }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                success: 1,
                message: "parameters are store successfully.",
                messageDetails: []
              }
   delete:
    description: This api will delete a customer details in customerDetail table
    queryParameters:
      param1:
        required: true
        displayName: Token
        description: Access token generated from login call on /user/login
      param2:
        required: true
        displayName: data (json)
        description: json array example phoneNumber , firstName & lastName required Key
        type:
        example:  | 
         {
            "storeLocationId": 123,
            "storeLocationDetailId": 54
         }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                success: 1,
                response: []
              }